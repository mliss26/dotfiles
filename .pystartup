# Add auto-completion and a stored history file of commands to your Python
# interactive interpreter. Requires Python 2.0+, readline. Autocomplete is
# bound to the Esc key by default (you can change it - see readline docs).
#
# Store the file in ~/.pystartup, and set an environment variable to point
# to it:  "export PYTHONSTARTUP=~/.pystartup" in bash.

import atexit
import os
import ctypes
import readline
import rlcompleter
import math
import numpy as np
import matplotlib.pyplot as plt


historyPath = os.path.expanduser("~/.pyhistory")

def save_history(historyPath=historyPath):
    import readline
    readline.write_history_file(historyPath)

if os.path.exists(historyPath):
    readline.read_history_file(historyPath)

readline.parse_and_bind('tab: complete')

atexit.register(save_history)
del os, atexit, readline, rlcompleter, save_history, historyPath

import math
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import style

style.use('dark_background')

def in2mm(inches):
    return inches * 25.4

def mm2in(mm):
    return mm / 25.4

def c2f(c):
    return c * 9/5 + 32

def f2c(f):
    return (f - 32) * 5/9

def plot(*args, **kwargs):
    plt.plot(*args, **kwargs)
    plt.grid(True, which='major', axis='both', color='#505050')
    plt.grid(True, which='minor', axis='both', color='#303030')
    plt.minorticks_on()
    #plt.show()

def semilogx(*args, **kwargs):
    plt.semilogx(*args, **kwargs)
    plt.grid(True, which='major', axis='both', color='#505050')
    plt.grid(True, which='minor', axis='both', color='#303030')
    plt.minorticks_on()
    #plt.show()

def semilogy(*args, **kwargs):
    plt.semilogy(*args, **kwargs)
    plt.grid(True, which='major', axis='both', color='#505050')
    plt.grid(True, which='minor', axis='both', color='#303030')
    plt.minorticks_on()
    #plt.show()

def loglog(*args, **kwargs):
    plt.loglog(*args, **kwargs)
    plt.grid(True, which='major', axis='both', color='#505050')
    plt.grid(True, which='minor', axis='both', color='#303030')
    plt.minorticks_on()
    #plt.show()

def get_fft(x, fs=1):
    X = np.fft.fftshift(np.fft.fft(x))/len(x)
    f = np.fft.fftshift(np.fft.fftfreq(len(x), 1/fs))
    return X, f

